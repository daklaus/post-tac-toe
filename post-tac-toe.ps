%!
% Post-tac-toe game in PostScript by Klaus Krapfenbauer
% execute this script with the linux command `gsx post-tac-toe.ps`.
% You need to have the ghostscript package installed.

% TODO (KK): Draw row and column indices for easier input

% Global constants
/banner (Post-tac-toe by Klaus Krapfenbauer) def

/cellLength 60 def
/leftField 40 def
/fieldTopOffset 40 def
/margin 10 def
/cellPadding 10 def
/bannerFontSize 20 def

/top 72 11 mul margin 2 mul sub def
/right 72 8.5 mul margin 2 mul sub def
/topStart top 0 sub def
/topField topStart fieldTopOffset sub def

/currentPlayer null def
/moveCount null def

% field scale and starting point
margin margin translate

/new {
  0 0 0 setrgbcolor
  erasepage
  drawfield

  /state [ gameWidth { [ gameHeight {0} repeat ] } repeat ] def
  /moveCount 0 def

  () =
  (New game started) =
  (Enter "<row-index> <column-index> i" to insert the first mark. Indices start with 0 at the top left cell.) =

  /currentPlayer 0 def
  setNextPlayer
  whoseTurnMessage
} def

/change {
  /random exch def
  /players exch def
  /winMarks exch def
  /gameWidth exch def
  /gameHeight exch def

  /fieldHeight cellLength gameHeight mul def
  /fieldWidth cellLength gameWidth mul def

  new
  
} def

/drawfield {
  << >> begin

  /Helvetica findfont bannerFontSize scalefont setfont
  35 topStart bannerFontSize sub moveto
  banner show

  3 setlinewidth
  % Draw outer border
  newpath
  leftField topField moveto
  0 fieldHeight neg rlineto
  fieldWidth 0 rlineto
  0 fieldHeight rlineto
  closepath
  stroke

  % Draw grid
  newpath
  % Vertical lines
  1 1 gameWidth 1 sub {
    << >> begin
    /i exch def

    leftField i cellLength mul add topField moveto
    0 fieldHeight neg rlineto

    end
  } for

  % Horizontal lines
  1 1 gameHeight 1 sub {
    << >> begin
    /i exch def

    leftField topField i cellLength mul sub moveto
    fieldWidth 0 rlineto

    end
  } for

  stroke

  end
} def


/drawMark {
  << >> begin

  /col exch def
  /row exch def
  /markIdx exch def

  /cellTop topField row cellLength mul sub cellPadding sub def
  /cellLeft leftField col cellLength mul add cellPadding add def
  /cellInnerLength cellLength cellPadding 2 mul sub def

  3 setlinewidth

  newpath

  % switch markIdx
  markIdx
  dup 1 eq {
    pop 0
    % Draw an X
    cellLeft cellTop moveto
    cellInnerLength cellInnerLength neg rlineto
    cellLeft cellInnerLength add cellTop moveto
    cellInnerLength neg cellInnerLength neg rlineto
  } if
  dup 2 eq {
    pop 0
    % Draw an O
    /radius cellInnerLength 2 div def
    cellLeft radius add  cellTop radius sub  radius  0 360 arc closepath
  } if
  dup 3 eq {
    pop 0
    % Draw a triangle
    cellLeft cellInnerLength 2 div add cellTop moveto
    cellLeft cellTop cellInnerLength sub lineto
    cellInnerLength 0 rlineto
    closepath
  } if
  dup 4 eq {
    pop 0
    % Draw a square
    cellLeft cellTop moveto
    0 cellInnerLength neg rlineto
    cellInnerLength 0 rlineto
    0 cellInnerLength rlineto
    closepath
  } if
  dup 5 eq {
    pop 0
    % Draw a Y
    cellLeft cellTop moveto
    cellInnerLength 2 div cellInnerLength neg 2 div rlineto
    0 cellInnerLength neg 2 div rlineto
    0 cellInnerLength 2 div rmoveto
    cellInnerLength 2 div cellInnerLength 2 div rlineto
  } if
  pop
  % TODO (KK): Add even more player marks

  stroke

  end
} def

/i {
  {
    /col exch def
    /row exch def
  
    % Check the input
    row 0 lt row gameHeight ge or {
      (Row index out of range) =
      stop
    } if
    col 0 lt col gameWidth ge or {
      (Column index out of range) =
      stop
    } if
  
    % Check that the field is still empty
    state col get row get 0 ne {
      (Cell already marked) =
      stop
    } if
  
    % Draw the mark on the field
    currentPlayer row col drawMark

    % Advancing global variables
    state col get row currentPlayer put
    /moveCount moveCount 1 add def
  
    % Check for wins
    /winner currentPlayer row col whoWon def
    winner 0 ge {
      % We have a winner, end the game and start a new one
      winner announceWinner
      stop
    } if
  
    % Advancing global variables
    setNextPlayer

    whoseTurnMessage

  } stopped pop
} def

% Algorithm loosly based on https://stackoverflow.com/a/1058804
/whoWon {
  << >> begin
  {

    /col exch def
    /row exch def
    /player exch def

    /colMarks 0 def
    /rowMarks 0 def
    /diagMarks 0 def
    /rdiagMarks 0 def
    
    % From 1 - k to k - 1
    1 winMarks sub 1 winMarks 1 sub {
      /i exch def

      % Check row
      row col i add /colMarks countMark

      % Check column
      row i add col /rowMarks countMark

      % Check diagonal
      row i add col i add /diagMarks countMark

      % Check reverse diagonal
      row i add col i neg add /rdiagMarks countMark


      % Check if we already have a winner
      colMarks winMarks ge
      rowMarks winMarks ge or
      diagMarks winMarks ge or
      rdiagMarks winMarks ge or {
        % The player won
        player
        stop
      } if

    } for

    % If all fields are filled, it's a draw (represented as player 0)
    moveCount gameHeight gameWidth mul ge {
      0
      stop
    } if

    % Nobody won so far (represented by player -1)
    -1
  
  } stopped pop
  end
} def

/isInBounds {
  << >> begin

  /col exch def
  /row exch def

  % Check row index
  row 0 ge row gameHeight lt and
  col 0 ge col gameWidth lt and
  and

  end
} def

/countMark {
  << >> begin

  /counterName exch def % Stores the name literal of the global variable to operate on
  /col exch def
  /row exch def

  row col isInBounds {
    state col get row get player eq {
      % One more mark found in this direction for this player, increase the counter
      % Indirect counter++
      counterName counterName load 1 add store
    } {
      % Another players mark (or blank field) found, reset mark counter
      counterName 0 store
    } ifelse
  } if
  
  end
} def

/setNextPlayer {
  random {
    % Randomly choose next player
    /currentPlayer rand players mod 1 add def
  } {
    % Choose next player cyclic
    /currentPlayer currentPlayer players mod 1 add def
  } ifelse
} def

/announceWinner {
  << >> begin

  /winner exch def

  () =
  winner 0 eq {
    % It's a draw
    (It's a draw! :\() =
  } {
    (Hey, you have WON player ) print winner 2 string cvs print (! Congratulations!) =
  } ifelse
  () =
  (Enter "new" to start a new game.) =

  end
} def

/whoseTurnMessage {
  (It's your turn, player ) print currentPlayer 2 string cvs print (!) =
} def

/main {
  () =
  (=======================================================) =
  banner =
  (=======================================================) =
  () =
  (You can change the game settings by entering "<rows> <cols> <win-number> <player> <random> change") =
  (where) =
  (  <rows> is the number of rows of the field) =
  (  <cols> is the number of columns of the field) =
  (  <win-number> is the number of marks in a row, column or diagonal a player needs to win the game) =
  (  <player> is the number of players) =
  (  <random> can be set to true to determine the next player by a dice roll.) =
  (The default tic-tac-toe game setting is "3 3 3 2 false") =
  () =
  3 3 3 2 false change
} def

main
